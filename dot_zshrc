# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export FZF_BASE="$(which fzf)"
eval "$(zoxide init zsh)"
ZSH_WEB_SEARCH_ENGINES=(
explain "https://explainshell.com/explain?cmd="
archwiki "https://wiki.archlinux.org/title/"
)
# turnoff history verification to prevent reprint commands
unsetopt histverify
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="random"
# use vim mode
bindkey -v
CASE_SENSITIVE="true"

zstyle ':omz:update' mode reminder  

plugins=(
git
aliases
colored-man-pages
command-not-found
extract
fzf
copybuffer
ripgrep
vi-mode
python
archlinux
fd
web-search
)

source $ZSH/oh-my-zsh.sh
# load antigen
source ~/.config/antigen.zsh
antigen bundle chrissicool/zsh-256color
antigen bundle Aloxaf/fzf-tab
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-history-substring-search
antigen bundle zsh-users/zsh-completions
antigen apply
# User configuration
function edit(){
   if [[ $# -eq 1  && -a $1 ]]; then
     nvim $1 && chezmoi add $1
   else
     return 1
   fi 
}
export VI_MODE_SET_CURSOR=true
export EDITOR='nvim'
alias zmisc="autoload -Uz zed tetriscurses zmv zargs && unalias zmisc"
alias clip="xclip -selection clipboard"
alias c="clear"
alias en="LC_ALL=C"
alias ls="exa --color=always"
alias ll="ls -lh --icons"
alias la="ls -lah --icons"
alias lar="ls -lRah --icons"
alias ltr="ls -lTah --icons"
alias show="showkey -a"
alias h="history | fzf --tac | sed -E 's/\s+[0-9]*\s+(.*)/\1/' | tee /dev/tty | xclip -selection clipboard"
autoload -Uz zcalc 
zstyle ':fzf-tab:*' fzf-bindings 'ctrl-y:select' 'ctrl-a:toggle-all'
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'
zstyle ':fzf-tab:complete:(\\|)run-help:*' fzf-preview 'run-help $word'
zstyle ':fzf-tab:complete:man:*' fzf-preview 'man $word'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -alF1 -g --color-scale --color=always --icons --time-style long-iso --git --extended $realpath'
zstyle ':fzf-tab:complete:exa:*' fzf-preview 'if [[ -d $realpath ]]; then exa -alF1 -g --color-scale --color=always --icons --time-style long-iso --git --extended $realpath; elif [[ -a $realpath && $(file -i $realpath | grep asc) ]]; then bat --color=always $realpath; elif [[ -a $realpath && -n $(file -i $realpath | grep exe) ]];then hexdump -n 256 -C $realpath; else echo Description:;echo $desc | fold -w 80; fi'
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
	'git diff $word'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
	'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
	'git help $word | bat -plman --color=always'
# prevent emotty theme from loading
if [ "$RANDOM_THEME" = "emotty" ]; then source $ZSH/themes/random.zsh-theme; fi
# prepend sudo to the command to gain super user access
function _prepend-sudo {
  if [[ $BUFFER != 'sudo'* ]]; then
    BUFFER="sudo $BUFFER"
    CURSOR+=5
  fi
}
zle -N _prepend-sudo
bindkey -M vicmd 's' _prepend-sudo
bindkey -M viins '\es' _prepend-sudo
# edit the current shell command with default editor
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd 'e' edit-command-line
bindkey -M viins '^e' edit-command-line
# replace strings occured in the current command
autoload -U replace-string
zle -N replace-string
bindkey -M vicmd '\er' replace-string
function _list-all-dir (){
    setopt globdots
    BUFFER="la "
    CURSOR+=3
    zle fzf-tab-complete
    zle accept-line
    unsetopt globdots
}
function _list-dir (){
    BUFFER="ll "
    CURSOR+=3
    zle fzf-tab-complete
    zle accept-line
}
function _prev-dir (){
    cd ..
    zle reset-prompt
}
function _next-dir (){
    BUFFER="cd "
    CURSOR+=3
    zle fzf-tab-complete
    if [[ $BUFFER == 'cd ' ]]; then
        BUFFER=''
    else
        zle accept-line
        zle reset-prompt
    fi
}
zle -N _prev-dir
zle -N _next-dir
zle -N _list-all-dir
zle -N _list-dir
bindkey -M viins '^[[1;5D' _prev-dir
bindkey -M viins '^[[1;5C' _next-dir
bindkey -M viins '^[A' _list-all-dir
bindkey -M viins '^[L' _list-dir
